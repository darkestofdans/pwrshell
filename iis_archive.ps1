#Turn off StrictMode to prevent variable problems.
Set-StrictMode -Off

$Date = (Get-Date -format "MM_dd_yyyy")

$loggingfolder = Test-Path -pathtype container -path c:\logging
If ($loggingfolder -eq $false) {
    New-item -ItemType Directory -Force -Path c:\logging
}

$loggingfile = "c:\logging\" + $Date + "deletedfiles.txt"

#create function to zip folders
function Zip-Subfolders {

    #Define the path and that we're interested in the folders inside.  In this case IIS logs.
    $subfolders = Get-ChildItem -Path "c:\inetpub\logs\logfiles" | Where-Object { $_.PSIsContainer }
  
    #loop through subdirectories
    #Thank you to Ronny Kaufmann for doing the heavy lifting for me.  https://stackoverflow.com/a/43732839
    ForEach ($s in $subfolders)
	{
        $path = $s
        $path
        Set-Location $path.FullName
        $fullpath = $path.FullName
        $pathName = $path.BaseName

        #Pick all .log files older than 2 days.		
        $items = Get-ChildItem -filter "*.log" | Where-Object {($_.LastWriteTime -lt (Get-Date).AddDays(-2))}

        $Date = (Get-Date -format "MM_dd_yyyy")
        $archivename = $path.BaseName + $Date + ".zip"
		#Outputpath puts zips into the folder that is being compressed
        $outputpath = Join-path $fullpath $archivename
        
        #Compresses the files and logs all output
        Compress-Archive -Path $items -DestinationPath $outputpath -CompressionLevel optimal -update -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile
    }
}

#Test if inetpub logs exist, otherwise skip.
$IISfolder = Test-Path c:\inetpub\logs\logfiles
If ($IISfolder -eq $true) {
	#Call function since path exists.
	Zip-Subfolders
        #Delete log files older than 2 days, but it's okay because we zipped them.
     Get-ChildItem –Path "c:\inetpub\logs\logfiles" -Recurse | Where-Object {($_.LastWriteTime -lt (Get-Date).AddDays(-2))} | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile
} Else { Write-Output "inetpub folder not here" }	

#Select Windows update files older than 14 days and remove them
Get-ChildItem –Path "C:\windows\softwaredistribution\download" -Recurse | Where-Object {($_.LastWriteTime -lt (Get-Date).AddDays(-14))} | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile


#Define temp folders including User's temp folders and delete and log all output

Get-ChildItem -path "C:\Temp\*" -Recurse | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1  | Add-Content $loggingfile
Get-ChildItem -path "C:\Windows\Temp\*" -Recurse | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile
Get-ChildItem -path "C:\Users\*\Appdata\Local\Temp\*" -Recurse | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile
Get-ChildItem -Path "C:\windows\logs\cbs\cbspersist_*" -Recurse | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile

#Delete the logs generated by this script older than 31 days
Get-ChildItem –Path $loggingfolder -Recurse | Where-Object {($_.LastWriteTime -lt (Get-Date).AddDays(-31))} | Remove-Item -Force -Recurse -Verbose 4>&1 3>&1 2>&1 | Add-Content $loggingfile

#Empty recycling bin as admin 
start-process -verb RunAs 'cmd' -ArgumentList "/c rd /s /q C:\`$Recycle.bin"

